//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("pModel", "FK_ANSWERSPARAMS_1", "testsparams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Recog.Data.testsparam), "answersparams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Recog.Data.answersparam), true)]
[assembly: EdmRelationshipAttribute("pModel", "FK_CELLSPARAMS_1", "answersparams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Recog.Data.answersparam), "cellsparams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Recog.Data.cellsparam), true)]
[assembly: EdmRelationshipAttribute("pModel", "FK_TESTSPARAMS_1", "groups", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Recog.Data.group), "testsparams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Recog.Data.testsparam), true)]
[assembly: EdmRelationshipAttribute("pModel", "FK_PACKTESTS_1", "packs", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Recog.Data.pack), "packtests", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Recog.Data.packtest), true)]

#endregion

namespace Recog.Data
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class pBaseEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект pBaseEntities, используя строку соединения из раздела "pBaseEntities" файла конфигурации приложения.
        /// </summary>
        public pBaseEntities() : base("name=pBaseEntities", "pBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта pBaseEntities.
        /// </summary>
        public pBaseEntities(string connectionString) : base(connectionString, "pBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта pBaseEntities.
        /// </summary>
        public pBaseEntities(EntityConnection connection) : base(connection, "pBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<answersparam> answersparams
        {
            get
            {
                if ((_answersparams == null))
                {
                    _answersparams = base.CreateObjectSet<answersparam>("answersparams");
                }
                return _answersparams;
            }
        }
        private ObjectSet<answersparam> _answersparams;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<cellsparam> cellsparams
        {
            get
            {
                if ((_cellsparams == null))
                {
                    _cellsparams = base.CreateObjectSet<cellsparam>("cellsparams");
                }
                return _cellsparams;
            }
        }
        private ObjectSet<cellsparam> _cellsparams;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<group> groups
        {
            get
            {
                if ((_groups == null))
                {
                    _groups = base.CreateObjectSet<group>("groups");
                }
                return _groups;
            }
        }
        private ObjectSet<group> _groups;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<pack> packs
        {
            get
            {
                if ((_packs == null))
                {
                    _packs = base.CreateObjectSet<pack>("packs");
                }
                return _packs;
            }
        }
        private ObjectSet<pack> _packs;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<packtest> packtests
        {
            get
            {
                if ((_packtests == null))
                {
                    _packtests = base.CreateObjectSet<packtest>("packtests");
                }
                return _packtests;
            }
        }
        private ObjectSet<packtest> _packtests;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<scaner> scaners
        {
            get
            {
                if ((_scaners == null))
                {
                    _scaners = base.CreateObjectSet<scaner>("scaners");
                }
                return _scaners;
            }
        }
        private ObjectSet<scaner> _scaners;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<testsparam> testsparams
        {
            get
            {
                if ((_testsparams == null))
                {
                    _testsparams = base.CreateObjectSet<testsparam>("testsparams");
                }
                return _testsparams;
            }
        }
        private ObjectSet<testsparam> _testsparams;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet answersparams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToanswersparams(answersparam answersparam)
        {
            base.AddObject("answersparams", answersparam);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet cellsparams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTocellsparams(cellsparam cellsparam)
        {
            base.AddObject("cellsparams", cellsparam);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet groups. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTogroups(group group)
        {
            base.AddObject("groups", group);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet packs. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTopacks(pack pack)
        {
            base.AddObject("packs", pack);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet packtests. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTopacktests(packtest packtest)
        {
            base.AddObject("packtests", packtest);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet scaners. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToscaners(scaner scaner)
        {
            base.AddObject("scaners", scaner);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet testsparams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTotestsparams(testsparam testsparam)
        {
            base.AddObject("testsparams", testsparam);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="pModel", Name="answersparam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class answersparam : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта answersparam.
        /// </summary>
        /// <param name="ida">Исходное значение свойства ida.</param>
        /// <param name="idt">Исходное значение свойства idt.</param>
        /// <param name="description">Исходное значение свойства description.</param>
        /// <param name="cellscount">Исходное значение свойства cellscount.</param>
        public static answersparam Createanswersparam(global::System.Int32 ida, global::System.Int32 idt, global::System.String description, global::System.Int32 cellscount)
        {
            answersparam answersparam = new answersparam();
            answersparam.ida = ida;
            answersparam.idt = idt;
            answersparam.description = description;
            answersparam.cellscount = cellscount;
            return answersparam;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ida
        {
            get
            {
                return _ida;
            }
            set
            {
                if (_ida != value)
                {
                    OnidaChanging(value);
                    ReportPropertyChanging("ida");
                    _ida = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ida");
                    OnidaChanged();
                }
            }
        }
        private global::System.Int32 _ida;
        partial void OnidaChanging(global::System.Int32 value);
        partial void OnidaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> num
        {
            get
            {
                return _num;
            }
            set
            {
                OnnumChanging(value);
                ReportPropertyChanging("num");
                _num = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("num");
                OnnumChanged();
            }
        }
        private Nullable<global::System.Int32> _num;
        partial void OnnumChanging(Nullable<global::System.Int32> value);
        partial void OnnumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idt
        {
            get
            {
                return _idt;
            }
            set
            {
                OnidtChanging(value);
                ReportPropertyChanging("idt");
                _idt = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("idt");
                OnidtChanged();
            }
        }
        private global::System.Int32 _idt;
        partial void OnidtChanging(global::System.Int32 value);
        partial void OnidtChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String buttondescription
        {
            get
            {
                return _buttondescription;
            }
            set
            {
                OnbuttondescriptionChanging(value);
                ReportPropertyChanging("buttondescription");
                _buttondescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("buttondescription");
                OnbuttondescriptionChanged();
            }
        }
        private global::System.String _buttondescription;
        partial void OnbuttondescriptionChanging(global::System.String value);
        partial void OnbuttondescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 cellscount
        {
            get
            {
                return _cellscount;
            }
            set
            {
                OncellscountChanging(value);
                ReportPropertyChanging("cellscount");
                _cellscount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("cellscount");
                OncellscountChanged();
            }
        }
        private global::System.Int32 _cellscount;
        partial void OncellscountChanging(global::System.Int32 value);
        partial void OncellscountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> intercellswidth
        {
            get
            {
                return _intercellswidth;
            }
            set
            {
                OnintercellswidthChanging(value);
                ReportPropertyChanging("intercellswidth");
                _intercellswidth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("intercellswidth");
                OnintercellswidthChanged();
            }
        }
        private Nullable<global::System.Int32> _intercellswidth;
        partial void OnintercellswidthChanging(Nullable<global::System.Int32> value);
        partial void OnintercellswidthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> cellswidth
        {
            get
            {
                return _cellswidth;
            }
            set
            {
                OncellswidthChanging(value);
                ReportPropertyChanging("cellswidth");
                _cellswidth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("cellswidth");
                OncellswidthChanged();
            }
        }
        private Nullable<global::System.Int32> _cellswidth;
        partial void OncellswidthChanging(Nullable<global::System.Int32> value);
        partial void OncellswidthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> cellshight
        {
            get
            {
                return _cellshight;
            }
            set
            {
                OncellshightChanging(value);
                ReportPropertyChanging("cellshight");
                _cellshight = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("cellshight");
                OncellshightChanged();
            }
        }
        private Nullable<global::System.Int32> _cellshight;
        partial void OncellshightChanging(Nullable<global::System.Int32> value);
        partial void OncellshightChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> toplx
        {
            get
            {
                return _toplx;
            }
            set
            {
                OntoplxChanging(value);
                ReportPropertyChanging("toplx");
                _toplx = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("toplx");
                OntoplxChanged();
            }
        }
        private Nullable<global::System.Int32> _toplx;
        partial void OntoplxChanging(Nullable<global::System.Int32> value);
        partial void OntoplxChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> toply
        {
            get
            {
                return _toply;
            }
            set
            {
                OntoplyChanging(value);
                ReportPropertyChanging("toply");
                _toply = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("toply");
                OntoplyChanged();
            }
        }
        private Nullable<global::System.Int32> _toply;
        partial void OntoplyChanging(Nullable<global::System.Int32> value);
        partial void OntoplyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> toprx
        {
            get
            {
                return _toprx;
            }
            set
            {
                OntoprxChanging(value);
                ReportPropertyChanging("toprx");
                _toprx = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("toprx");
                OntoprxChanged();
            }
        }
        private Nullable<global::System.Int32> _toprx;
        partial void OntoprxChanging(Nullable<global::System.Int32> value);
        partial void OntoprxChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> topry
        {
            get
            {
                return _topry;
            }
            set
            {
                OntopryChanging(value);
                ReportPropertyChanging("topry");
                _topry = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("topry");
                OntopryChanged();
            }
        }
        private Nullable<global::System.Int32> _topry;
        partial void OntopryChanging(Nullable<global::System.Int32> value);
        partial void OntopryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> blx
        {
            get
            {
                return _blx;
            }
            set
            {
                OnblxChanging(value);
                ReportPropertyChanging("blx");
                _blx = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("blx");
                OnblxChanged();
            }
        }
        private Nullable<global::System.Int32> _blx;
        partial void OnblxChanging(Nullable<global::System.Int32> value);
        partial void OnblxChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> bly
        {
            get
            {
                return _bly;
            }
            set
            {
                OnblyChanging(value);
                ReportPropertyChanging("bly");
                _bly = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("bly");
                OnblyChanged();
            }
        }
        private Nullable<global::System.Int32> _bly;
        partial void OnblyChanging(Nullable<global::System.Int32> value);
        partial void OnblyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> brx
        {
            get
            {
                return _brx;
            }
            set
            {
                OnbrxChanging(value);
                ReportPropertyChanging("brx");
                _brx = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("brx");
                OnbrxChanged();
            }
        }
        private Nullable<global::System.Int32> _brx;
        partial void OnbrxChanging(Nullable<global::System.Int32> value);
        partial void OnbrxChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> bry
        {
            get
            {
                return _bry;
            }
            set
            {
                OnbryChanging(value);
                ReportPropertyChanging("bry");
                _bry = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("bry");
                OnbryChanged();
            }
        }
        private Nullable<global::System.Int32> _bry;
        partial void OnbryChanging(Nullable<global::System.Int32> value);
        partial void OnbryChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_ANSWERSPARAMS_1", "testsparams")]
        public testsparam testsparam
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<testsparam>("pModel.FK_ANSWERSPARAMS_1", "testsparams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<testsparam>("pModel.FK_ANSWERSPARAMS_1", "testsparams").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<testsparam> testsparamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<testsparam>("pModel.FK_ANSWERSPARAMS_1", "testsparams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<testsparam>("pModel.FK_ANSWERSPARAMS_1", "testsparams", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_CELLSPARAMS_1", "cellsparams")]
        public EntityCollection<cellsparam> cellsparams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<cellsparam>("pModel.FK_CELLSPARAMS_1", "cellsparams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<cellsparam>("pModel.FK_CELLSPARAMS_1", "cellsparams", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="pModel", Name="cellsparam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class cellsparam : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта cellsparam.
        /// </summary>
        /// <param name="idc">Исходное значение свойства idc.</param>
        /// <param name="ida">Исходное значение свойства ida.</param>
        public static cellsparam Createcellsparam(global::System.Int32 idc, global::System.Int32 ida)
        {
            cellsparam cellsparam = new cellsparam();
            cellsparam.idc = idc;
            cellsparam.ida = ida;
            return cellsparam;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idc
        {
            get
            {
                return _idc;
            }
            set
            {
                if (_idc != value)
                {
                    OnidcChanging(value);
                    ReportPropertyChanging("idc");
                    _idc = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("idc");
                    OnidcChanged();
                }
            }
        }
        private global::System.Int32 _idc;
        partial void OnidcChanging(global::System.Int32 value);
        partial void OnidcChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ida
        {
            get
            {
                return _ida;
            }
            set
            {
                OnidaChanging(value);
                ReportPropertyChanging("ida");
                _ida = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ida");
                OnidaChanged();
            }
        }
        private global::System.Int32 _ida;
        partial void OnidaChanging(global::System.Int32 value);
        partial void OnidaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String buttonsescription
        {
            get
            {
                return _buttonsescription;
            }
            set
            {
                OnbuttonsescriptionChanging(value);
                ReportPropertyChanging("buttonsescription");
                _buttonsescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("buttonsescription");
                OnbuttonsescriptionChanged();
            }
        }
        private global::System.String _buttonsescription;
        partial void OnbuttonsescriptionChanging(global::System.String value);
        partial void OnbuttonsescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> mark
        {
            get
            {
                return _mark;
            }
            set
            {
                OnmarkChanging(value);
                ReportPropertyChanging("mark");
                _mark = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("mark");
                OnmarkChanged();
            }
        }
        private Nullable<global::System.Int32> _mark;
        partial void OnmarkChanging(Nullable<global::System.Int32> value);
        partial void OnmarkChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_CELLSPARAMS_1", "answersparams")]
        public answersparam answersparam
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<answersparam>("pModel.FK_CELLSPARAMS_1", "answersparams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<answersparam>("pModel.FK_CELLSPARAMS_1", "answersparams").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<answersparam> answersparamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<answersparam>("pModel.FK_CELLSPARAMS_1", "answersparams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<answersparam>("pModel.FK_CELLSPARAMS_1", "answersparams", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="pModel", Name="group")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class group : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта group.
        /// </summary>
        /// <param name="idg">Исходное значение свойства idg.</param>
        public static group Creategroup(global::System.Int32 idg)
        {
            group group = new group();
            group.idg = idg;
            return group;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idg
        {
            get
            {
                return _idg;
            }
            set
            {
                if (_idg != value)
                {
                    OnidgChanging(value);
                    ReportPropertyChanging("idg");
                    _idg = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("idg");
                    OnidgChanged();
                }
            }
        }
        private global::System.Int32 _idg;
        partial void OnidgChanging(global::System.Int32 value);
        partial void OnidgChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_TESTSPARAMS_1", "testsparams")]
        public EntityCollection<testsparam> testsparams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<testsparam>("pModel.FK_TESTSPARAMS_1", "testsparams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<testsparam>("pModel.FK_TESTSPARAMS_1", "testsparams", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="pModel", Name="pack")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class pack : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта pack.
        /// </summary>
        /// <param name="idp">Исходное значение свойства idp.</param>
        /// <param name="description">Исходное значение свойства description.</param>
        public static pack Createpack(global::System.Int32 idp, global::System.String description)
        {
            pack pack = new pack();
            pack.idp = idp;
            pack.description = description;
            return pack;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idp
        {
            get
            {
                return _idp;
            }
            set
            {
                if (_idp != value)
                {
                    OnidpChanging(value);
                    ReportPropertyChanging("idp");
                    _idp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("idp");
                    OnidpChanged();
                }
            }
        }
        private global::System.Int32 _idp;
        partial void OnidpChanging(global::System.Int32 value);
        partial void OnidpChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_PACKTESTS_1", "packtests")]
        public EntityCollection<packtest> packtests
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<packtest>("pModel.FK_PACKTESTS_1", "packtests");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<packtest>("pModel.FK_PACKTESTS_1", "packtests", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="pModel", Name="packtest")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class packtest : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта packtest.
        /// </summary>
        /// <param name="idt">Исходное значение свойства idt.</param>
        /// <param name="idp">Исходное значение свойства idp.</param>
        /// <param name="idtest">Исходное значение свойства idtest.</param>
        public static packtest Createpacktest(global::System.Int32 idt, global::System.Int32 idp, global::System.Int32 idtest)
        {
            packtest packtest = new packtest();
            packtest.idt = idt;
            packtest.idp = idp;
            packtest.idtest = idtest;
            return packtest;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idt
        {
            get
            {
                return _idt;
            }
            set
            {
                if (_idt != value)
                {
                    OnidtChanging(value);
                    ReportPropertyChanging("idt");
                    _idt = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("idt");
                    OnidtChanged();
                }
            }
        }
        private global::System.Int32 _idt;
        partial void OnidtChanging(global::System.Int32 value);
        partial void OnidtChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idp
        {
            get
            {
                return _idp;
            }
            set
            {
                OnidpChanging(value);
                ReportPropertyChanging("idp");
                _idp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("idp");
                OnidpChanged();
            }
        }
        private global::System.Int32 _idp;
        partial void OnidpChanging(global::System.Int32 value);
        partial void OnidpChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idtest
        {
            get
            {
                return _idtest;
            }
            set
            {
                OnidtestChanging(value);
                ReportPropertyChanging("idtest");
                _idtest = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("idtest");
                OnidtestChanged();
            }
        }
        private global::System.Int32 _idtest;
        partial void OnidtestChanging(global::System.Int32 value);
        partial void OnidtestChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_PACKTESTS_1", "packs")]
        public pack pack
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<pack>("pModel.FK_PACKTESTS_1", "packs").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<pack>("pModel.FK_PACKTESTS_1", "packs").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<pack> packReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<pack>("pModel.FK_PACKTESTS_1", "packs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<pack>("pModel.FK_PACKTESTS_1", "packs", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="pModel", Name="scaner")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class scaner : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта scaner.
        /// </summary>
        /// <param name="ids">Исходное значение свойства ids.</param>
        /// <param name="currentscanername">Исходное значение свойства currentscanername.</param>
        /// <param name="driver">Исходное значение свойства driver.</param>
        public static scaner Createscaner(global::System.Int32 ids, global::System.String currentscanername, global::System.String driver)
        {
            scaner scaner = new scaner();
            scaner.ids = ids;
            scaner.currentscanername = currentscanername;
            scaner.driver = driver;
            return scaner;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ids
        {
            get
            {
                return _ids;
            }
            set
            {
                if (_ids != value)
                {
                    OnidsChanging(value);
                    ReportPropertyChanging("ids");
                    _ids = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ids");
                    OnidsChanged();
                }
            }
        }
        private global::System.Int32 _ids;
        partial void OnidsChanging(global::System.Int32 value);
        partial void OnidsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String currentscanername
        {
            get
            {
                return _currentscanername;
            }
            set
            {
                OncurrentscanernameChanging(value);
                ReportPropertyChanging("currentscanername");
                _currentscanername = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("currentscanername");
                OncurrentscanernameChanged();
            }
        }
        private global::System.String _currentscanername;
        partial void OncurrentscanernameChanging(global::System.String value);
        partial void OncurrentscanernameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String driver
        {
            get
            {
                return _driver;
            }
            set
            {
                OndriverChanging(value);
                ReportPropertyChanging("driver");
                _driver = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("driver");
                OndriverChanged();
            }
        }
        private global::System.String _driver;
        partial void OndriverChanging(global::System.String value);
        partial void OndriverChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="pModel", Name="testsparam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class testsparam : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта testsparam.
        /// </summary>
        /// <param name="idt">Исходное значение свойства idt.</param>
        /// <param name="idg">Исходное значение свойства idg.</param>
        /// <param name="description">Исходное значение свойства description.</param>
        /// <param name="answerscount">Исходное значение свойства answerscount.</param>
        /// <param name="blankexists">Исходное значение свойства blankexists.</param>
        public static testsparam Createtestsparam(global::System.Int32 idt, global::System.Int32 idg, global::System.String description, global::System.Int32 answerscount, global::System.Int16 blankexists)
        {
            testsparam testsparam = new testsparam();
            testsparam.idt = idt;
            testsparam.idg = idg;
            testsparam.description = description;
            testsparam.answerscount = answerscount;
            testsparam.blankexists = blankexists;
            return testsparam;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idt
        {
            get
            {
                return _idt;
            }
            set
            {
                if (_idt != value)
                {
                    OnidtChanging(value);
                    ReportPropertyChanging("idt");
                    _idt = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("idt");
                    OnidtChanged();
                }
            }
        }
        private global::System.Int32 _idt;
        partial void OnidtChanging(global::System.Int32 value);
        partial void OnidtChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idg
        {
            get
            {
                return _idg;
            }
            set
            {
                OnidgChanging(value);
                ReportPropertyChanging("idg");
                _idg = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("idg");
                OnidgChanged();
            }
        }
        private global::System.Int32 _idg;
        partial void OnidgChanging(global::System.Int32 value);
        partial void OnidgChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 answerscount
        {
            get
            {
                return _answerscount;
            }
            set
            {
                OnanswerscountChanging(value);
                ReportPropertyChanging("answerscount");
                _answerscount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("answerscount");
                OnanswerscountChanged();
            }
        }
        private global::System.Int32 _answerscount;
        partial void OnanswerscountChanging(global::System.Int32 value);
        partial void OnanswerscountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 blankexists
        {
            get
            {
                return _blankexists;
            }
            set
            {
                OnblankexistsChanging(value);
                ReportPropertyChanging("blankexists");
                _blankexists = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("blankexists");
                OnblankexistsChanged();
            }
        }
        private global::System.Int16 _blankexists;
        partial void OnblankexistsChanging(global::System.Int16 value);
        partial void OnblankexistsChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_ANSWERSPARAMS_1", "answersparams")]
        public EntityCollection<answersparam> answersparams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<answersparam>("pModel.FK_ANSWERSPARAMS_1", "answersparams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<answersparam>("pModel.FK_ANSWERSPARAMS_1", "answersparams", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("pModel", "FK_TESTSPARAMS_1", "groups")]
        public group group
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<group>("pModel.FK_TESTSPARAMS_1", "groups").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<group>("pModel.FK_TESTSPARAMS_1", "groups").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<group> groupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<group>("pModel.FK_TESTSPARAMS_1", "groups");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<group>("pModel.FK_TESTSPARAMS_1", "groups", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
